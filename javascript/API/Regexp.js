/*
* 正则表达式的特性
*   1.检索
*   2.替换
* */

/*
* 字符类
* [...]     匹配括号内的任意字符
* [^...]    匹配不在括号内的任意字符
* .         匹配除换行符和其他unicode行终止符之外的任意字符
* \w        匹配任何ascii组成的字符
* \w        匹配任何非ascii组成的字符
* \s        匹配任何unicode空白符
* \S        匹配任何非unicode空白符
* \d        匹配任何ascii数字,等价于[0-9]
* \D        匹配任何ascii数字之外的任何字符
* \b        匹配退格直接量
* */

/*
* 重复字符语法
* {n,m}     匹配前一项至少n次,但不能超过m次
* {n,}      匹配前一项至少n次或者更多次
* {n}       匹配前一项n次
* ?         匹配前一项0次或者1次,等价于{0,1}
* +         匹配前一项1次或者多次,等价于{1,}
* *         匹配前一项0次或者多次,等价于{0,}
*
* 贪婪匹配(匹配尽可能多地字符,而且允许后续的正则表达式继续匹配)
* 非贪婪匹配(尽可能少的匹配) 在重复字符后加？
* */

/*
* 选择：使用｜
*
* 分组：使用（）
*   1.  把单独的项组合成子表达式
*   2.  定义子模式
*   3.  引用前面的子表达式 \1:表示第一个子表达式 \2：表示第二个子表达式 ...
*
* |         选择
* (...)     组合，将几个项组合为一个单元,记住这个组合相匹配的字符串供此后引用
* (?:...)   只组合，不记忆与该项组相匹配的引用
* \n
* */

/*
* 锚字符
*
* ^         匹配字符串的开头
* $         匹配字符串的结尾
* \b        匹配一个单词的边界
* \B        匹配非单词边界
* (?=p)     零宽正向先行断言 要求接下来的字符都于p匹配,但不能包括匹配p的那些字符
* (?!p)     零宽负向先行断言 要求接下来的字符不与p匹配
* (?<=p)    匹配以p开头的字符,不包括p
* (?<!p)    匹配不以p开头的字符
* */

/*
* 修饰符
*
* i 不区分大小写
* g 执行一个全局匹配
* m 多行匹配模式
* */

/*
* regexp 属性
*
* source        正则表达式文本
* global        是否带有g修饰符
* ignoreCase    是否带有i修饰符
* multiline     是否带有m修饰符
* lastIndex     
* */

